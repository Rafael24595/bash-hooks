#!/bin/bash

# -------------#
# DECLARATIONS #
# ------------ #

# Color codes
BOLD="\033[1m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
RESET="\033[0m"

DEFAULT_INPUT_FILE=".pre-commit-build.yaml"
DEFAULT_OUTPUT_FILE=".git/hooks/pre-commit"

REMOTE_LOCATION="./.remote-scripts"

WORKSPACE="."
INPUT_FILE=$DEFAULT_INPUT_FILE
OUTPUT_FILE=$DEFAULT_OUTPUT_FILE

LAST_CONTENT=""
declare -A DOWNLOADED_SOURCES

for ARG in "$@"; do
  if [[ "$ARG" == -t ]]; then
    OUTPUT_FILE="${REMOTE_LOCATION}/.temp/.output-test"
    mkdir -p "$(dirname "$OUTPUT_FILE")"
  elif [[ "$ARG" == --workspace=* ]]; then
    WORKSPACE="${ARG#*=}"
    INPUT_FILE="${WORKSPACE}/${DEFAULT_INPUT_FILE}"
    OUTPUT_FILE="${WORKSPACE}/${DEFAULT_OUTPUT_FILE}"
  elif [[ "$ARG" == --output=* ]]; then
    OUTPUT_FILE="${ARG#*=}"
  fi
done

log_script_execution() {
    local SCRIPT=$1
    local ARGS=$2

    echo -e "\nprintf \"\${BOLD}\\\\nExecuting '${SCRIPT}' script...\${RESET}\\\\n\"" >> "$OUTPUT_FILE"
    echo "$SCRIPT $ARGS" >> "$OUTPUT_FILE"
    echo 'if [ $? -ne 0 ]; then' >> "$OUTPUT_FILE"
    echo '    exit 1' >> "$OUTPUT_FILE"
    echo 'fi' >> "$OUTPUT_FILE"
    echo "printf \"\${BOLD}\\\\n <-----------------> \\\\n\${RESET}\"" >> "$OUTPUT_FILE"
}

fetch_write_remote_file() {
    local FILE_URL=$1
    local NAME=$2
    local SOURCES=$3

    echo -e "\nFetching ${NAME} from ${BOLD}'${FILE_URL}'${RESET}..."

    CONTENT=$(curl -sf "$FILE_URL")
    if [ $? -ne 0 ]; then
        exit_error "Failed to retrieve script from GitHub."
    fi

    if [ $SOURCES -eq 1 ]; then
        echo -e "Loading resources from ${BOLD}${NAME}${RESET}..."
        load_remote_sources $PROJECT $TAG "${CONTENT}"
        CONTENT="${LAST_CONTENT}"
    fi

    SCRIPT="${WORKSPACE}/${REMOTE_LOCATION}/${NAME}"

    mkdir -p "$(dirname "$SCRIPT")"
    touch "$SCRIPT"

    > $SCRIPT
    echo "$CONTENT" >> "${SCRIPT}"
    chmod +x $SCRIPT
}

fetch_write_remote_script() {
    local FILE_URL=$1
    local NAME=$2
    fetch_write_remote_file $FILE_URL $NAME 1
}

fetch_write_remote_source() {
    local FILE_URL=$1
    local NAME=$2
    fetch_write_remote_file $FILE_URL $NAME 0 > /dev/null
}

load_remote_sources() {
    local PROJECT=$1
    local TAG=$2
    local SCRIPT=$3
    
    # Loop through each line of the script
    SOURCES=$(grep -oP '^\s*source\s+\K([^\s#]+)' <<< "$SCRIPT")
    UPDATED_SCRIPT="${SCRIPT}"

    for SOURCE in $SOURCES; do
        FIX_SOURCE="${SOURCE#./}"
        FILE_URL="https://raw.githubusercontent.com/${PROJECT}/refs/tags/${TAG}/${SOURCE}"

        if [[ ! -v DOWNLOADED_SOURCES["$FIX_SOURCE"] ]]; then
            DOWNLOADED_SOURCES["$FIX_SOURCE"]=1
        fi

        fetch_write_remote_source $FILE_URL $FIX_SOURCE

        UPDATED_SOURCE="${REMOTE_LOCATION}/${FIX_SOURCE}"

        UPDATED_SCRIPT=$(echo "$UPDATED_SCRIPT" | sed "s|$SOURCE|$UPDATED_SOURCE|")
    done
    
    LAST_CONTENT="${UPDATED_SCRIPT}"
}

load_remote_scripts() {
    REPO_IDS=$(yq eval '.hooks.remote.repos[].id' ${INPUT_FILE})

    echo -e "\n${YELLOW}Loading remote scipts...${RESET}"

    for REPO_ID in $REPO_IDS; do
        NAME=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .name" ${INPUT_FILE})
        ORIGIN=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .origin" ${INPUT_FILE})
        TAG=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .tag" ${INPUT_FILE})
        TARGET=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .target" ${INPUT_FILE})
        ARGS=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .args[]" ${INPUT_FILE} | tr '\n' ' ')
        FILE_URL=""

        if [[ $NAME != *.sh ]]; then
            exit_error "Only Bash scripts are supported so far."
        fi

        if [[ "$ORIGIN" == https://github.com* ]]; then
            PROJECT="${ORIGIN#https://github.com/}"
            FILE_URL="https://raw.githubusercontent.com/${PROJECT}/refs/tags/${TAG}/${TARGET}/${NAME}"
        else
            exit_error "Currently, only GitHub repositories are supported."
        fi

        fetch_write_remote_script $FILE_URL $NAME
        
        log_script_execution "${REMOTE_LOCATION}/${NAME}" "$ARGS"

        echo -e "${GREEN}Script loadded successfully.${RESET}"
    done
}

load_local_scripts() {
    echo -e "\n\n${YELLOW}Loading local scipts...${RESET}"

    SOURCES=$(yq eval '.hooks.local.sources[].path' ${INPUT_FILE})
    for SOURCE in $SOURCES; do
        echo "\n# Import ${SOURCE}" >> "$OUTPUT_FILE"
        echo "source ${SOURCE}" >> "$OUTPUT_FILE"
    done

    SCRIPT_IDS=$(yq eval '.hooks.local.scripts[].id' ${INPUT_FILE})
    for SCRIPT_ID in $SCRIPT_IDS; do
        SCRIPT=$(yq e ".hooks.local.scripts[] | select(.id == \"${SCRIPT_ID}\") | .path" ${INPUT_FILE})
        ARGS=$(yq e ".hooks.local.scripts[] | select(.id == \"${SCRIPT_ID}\") | .args[]" ${INPUT_FILE} | tr '\n' ' ')

        echo -e "\nReading ${BOLD}'${SCRIPT}' script${RESET}..."

        file_must_exists "${WORKSPACE}/${SCRIPT}"

        log_script_execution "$SCRIPT" "$ARGS"

        echo -e "${GREEN}Script loadded successfully.${RESET}"
    done

     echo ""
}

file_must_exists() {
    local FILE=$1
    if [[ ! -f "$FILE" ]]; then
        exit_error "File does not exist."
    fi
}


exit_error() {
    local MESSAGE=$1
    echo -e "\n${RED}Error: ${MESSAGE}${RESET}\n"
    > $OUTPUT_FILE
    exit 1
}


# ------------------#
# BUILDING PROCCESS #
# ----------------- #

file_must_exists $INPUT_FILE

> $OUTPUT_FILE

echo "#!/bin/sh" >> "$OUTPUT_FILE"

echo -e "\n# Color codes" >> "$OUTPUT_FILE"
echo "BOLD=\"\\\033[1m\"" >> "$OUTPUT_FILE"
echo "RESET=\"\\\033[0m\"" >> "$OUTPUT_FILE"

echo -e "\n${BOLD}Building pre-commit hook...${RESET}\n"

# --------------------#
# LOAD REMOTE SCRIPTS #
# ------------------- #

echo -e "\n# <-- REPOSITORY SCRIPTS -->" >> "$OUTPUT_FILE"
echo -e "\nprintf \"\${BOLD}\\\\nRepository scripts: \\\\n\${RESET}\"" >> "$OUTPUT_FILE"

load_remote_scripts

# -------------------#
# LOAD LOCAL SCRIPTS #
# ------------------ #

echo -e "\n# <-- LOCAL SCRIPTS -->" >> "$OUTPUT_FILE"
echo -e "\nprintf \"\${BOLD}\\\\nLocal scripts: \\\\n\${RESET}\"" >> "$OUTPUT_FILE"

load_local_scripts

echo -e "\n${BOLD}Hook has been building successfully.${RESET}\n"
