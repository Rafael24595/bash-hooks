#!/bin/bash
set -e

_VERSION="0.5.0-SNAPSHOT"
_REPOSITORY="https://github.com/Rafael24595/bash-hooks"

# -------------#
# DECLARATIONS #
# ------------ #

# Color codes
BOLD="\033[1m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
RESET="\033[0m"

DEFAULT_HOOK_MODE="pre-commit"
DEFAULT_INPUT_FILE="pre-commit-build.yaml"
DEFAULT_OUTPUT_FILE=".git/hooks/${DEFAULT_HOOK_MODE}"

REMOTE_LOCATION=".remote-scripts"

IS_TEST=false

WORKSPACE="."

HOOK_MODE=$DEFAULT_HOOK_MODE
INPUT_FILE=$DEFAULT_INPUT_FILE
OUTPUT_FILE=$DEFAULT_OUTPUT_FILE

LAST_CONTENT=""
declare -A DOWNLOADED_SOURCES

COUNT_SOURCES=0
COUNT_LOCAL=0
COUNT_REMOTE=0

LIST_SOURCES=""
LIST_LOCAL=""
LIST_REMOTE=""

START_TIME=$(date +%s%3N)

# -------------- #
# MISC FUNCTIONS #
# -------------- #

exit_error() {
    local MESSAGE=$1
    echo -e "\n${RED}Error: ${MESSAGE}${RESET}\n" >&2
    clean_output "$OUTPUT_FILE"
    exit 1
}

clean_output() {
    local FILE=$1
    'true' > "$FILE"
}

# ---------------- #
# INPUT PROCESSING #
# ---------------- #

update_installer() {
    local VERSION=$1

    REFERENCE="heads/main"
    if [[ -z "$VERSION" ]]; then
        VERSION="latest"
    else
        read -r -p "$(echo -e "\n${YELLOW}Be careful, the update flag was implemented in version 0.0.5. The command cannot be recognized in earlier versions. Do you want to continue? (y/n): ${RESET}")" RESPONSE
        RESPONSE=$(echo "$RESPONSE" | tr '[:upper:]' '[:lower:]')

        if [[ "$RESPONSE" == "yes" ]] || [[ "$RESPONSE" == "y" ]]; then
            :
        elif [[ "$RESPONSE" == "no" ]] || [[ "$RESPONSE" == "n" ]]; then
            echo -e "\n${RED}The updating process has been canceled.${RESET}\n"
            exit 0
        fi

        REFERENCE="tags/${VERSION}"
    fi

    FILE_URL="https://raw.githubusercontent.com/Rafael24595/bash-hooks/refs/${REFERENCE}/install-pre-commit"

    echo -e "\nUpdating installer to ${BOLD}${VERSION}${RESET} version from ${BOLD}'${FILE_URL}'${RESET}..."

    CONTENT=$(curl -sf "$FILE_URL")
    if ! CONTENT=$(curl -sf "$FILE_URL") ; then
        exit_error "Failed to retrieve script from GitHub."
    fi

    echo -e "${GREEN}Installer updated successfully.${RESET}\n"

    SCRIPT="install-pre-commit"

    touch "$SCRIPT"

    clean_output "$SCRIPT"

    echo "$CONTENT" >> "${SCRIPT}"
    chmod +x "$SCRIPT"
}

for ARG in "$@"; do
  if [[ "$ARG" == --mode=* ]]; then
    ARG="${ARG#--mode=}"
    if [[ "$ARG" == "pre_commit" ]]; then
        HOOK_MODE="pre-commit"
    elif [[ "$ARG" == "pre_push" ]]; then
        HOOK_MODE="pre-push"
    fi
    OUTPUT_FILE=".git/hooks/${HOOK_MODE}"
  elif [[ "$ARG" == -t ]]; then
    OUTPUT_FILE="${REMOTE_LOCATION}/.temp/.${HOOK_MODE}"
    IS_TEST=true
  elif [[ "$ARG" == --workspace=* ]]; then
    WORKSPACE="${ARG#*=}"
  elif [[ "$ARG" == --input=* ]]; then
    INPUT_FILE="${ARG#*=}"
  elif [[ "$ARG" == --output=* ]]; then
    OUTPUT_FILE="${ARG#*=}"
  elif [[ "$ARG" == --version* ]] || [[ "$ARG" == -v ]]; then
    echo "install-pre-commit version $_VERSION ($_REPOSITORY)"
    exit 0
  elif [[ "$ARG" == --help* ]] || [[ "$ARG" == -h ]]; then
    echo -e "\nUsage:"
    echo -e "  install-pre-commit [flags]"
    echo -e "\nFlags:"
    echo -e "  -h --help             $YELLOW Help command. $RESET"
    echo -e "  -v --version          $YELLOW Shows actual installer version. $RESET"
    echo -e "  -u --update=tag       $YELLOW Updates the installer to the defined version. If a version is not specified, it will be updated to the latest version. $RESET"
    echo -e "  -t                    $YELLOW The script will be mounted inside the remote-scripts directory to prevent it from being used by Git. $RESET"
    echo -e "     --workspace=path   $YELLOW Defines the workspace where the script will be placed. $RESET"
    echo -e "     --input=path       $YELLOW Defines the directory and name where the input file is located. $RESET"
    echo -e "     --output=path      $YELLOW Defines directory and name where the script will be placed. $RESET"
    echo -e "     --mode=type        $YELLOW Specifies the build mode. Default is pre_commit. Valid options: pre_commit, pre_push. $RESET"
    echo ""
    exit 0
  elif [[ "$ARG" == --update=* ]]; then
    VERSION="${ARG#*=}"
    update_installer "$VERSION"
    exit 0
  elif [[ "$ARG" == --update* ]] || [[ "$ARG" == -u ]]; then
    update_installer ""
    exit 0
  fi
done

INPUT_FILE="${WORKSPACE}/${INPUT_FILE}"
OUTPUT_FILE="${WORKSPACE}/${OUTPUT_FILE}"

mkdir -p "$(dirname "$OUTPUT_FILE")"
touch "$OUTPUT_FILE"
chmod +x "$OUTPUT_FILE"

# --------- #
# FUNCTIONS #
# --------- #

log_script_execution() {
    local SCRIPT=$1
    local ARGS=$2
    {
        echo -e "\nprintf \"\${BOLD}\\\\nExecuting '${SCRIPT}' script...\${RESET}\\\\n\"" 
        echo "$SCRIPT $ARGS"
        echo 'if [ $? -ne 0 ]; then'
        echo '    exit 1'
        echo 'fi'
        echo -e "printf \"\${BOLD}\\\\n <-----------------> \\\\n\${RESET}\""
    } >> "$OUTPUT_FILE"
}

fetch_write_remote_file() {
    local FILE_URL=$1
    local NAME=$2
    local SOURCES=$3

    echo -e "\nFetching ${NAME} from ${BOLD}'${FILE_URL}'${RESET}..."

    CONTENT=$(curl -sf "$FILE_URL")
    if ! CONTENT=$(curl -sf "$FILE_URL") ; then
        exit_error "Failed to retrieve script from GitHub."
    fi

    if [ "$SOURCES" -eq 1 ]; then
        echo -e "Loading resources from ${BOLD}${NAME}${RESET}..."
        load_remote_sources "$PROJECT" "$TAG" "${CONTENT}"
        CONTENT="${LAST_CONTENT}"
    fi

    SCRIPT="${WORKSPACE}/${REMOTE_LOCATION}/${NAME}"

    mkdir -p "$(dirname "$SCRIPT")"
    touch "$SCRIPT"

    clean_output "$SCRIPT"

    echo "$CONTENT" >> "${SCRIPT}"
    chmod +x "$SCRIPT"
}

fetch_write_remote_script() {
    local FILE_URL=$1
    local NAME=$2
    fetch_write_remote_file "$FILE_URL" "$NAME" 1
}

fetch_write_remote_source() {
    local FILE_URL=$1
    local NAME=$2
    fetch_write_remote_file "$FILE_URL" "$NAME" 0 > /dev/null
}

load_remote_sources() {
    local PROJECT=$1
    local TAG=$2
    local SCRIPT=$3
    
    SOURCES=$(grep -oP '^\s*source\s+\K([^\s#]+)' <<< "$SCRIPT")
    UPDATED_SCRIPT="${SCRIPT}"

    for SOURCE in $SOURCES; do
        FIX_SOURCE="${SOURCE#./}"
        FILE_URL="https://raw.githubusercontent.com/${PROJECT}/refs/tags/${TAG}/${SOURCE}"

        if [[ ! -v DOWNLOADED_SOURCES["$FIX_SOURCE"] ]]; then
            DOWNLOADED_SOURCES["$FIX_SOURCE"]=1
        fi

        fetch_write_remote_source "$FILE_URL" "$FIX_SOURCE"

        UPDATED_SOURCE="${REMOTE_LOCATION}/${FIX_SOURCE}"

        UPDATED_SCRIPT=${UPDATED_SCRIPT//"$SOURCE"/"$UPDATED_SOURCE"}
    done
    
    LAST_CONTENT="${UPDATED_SCRIPT}"
}

load_remote_scripts() {
    echo -e "\n${YELLOW}Loading remote scipts...${RESET}"

    REPO_IDS=$(yq eval '.hooks.remote.repos[].id' "${INPUT_FILE}")
    if [[ -z "$REPO_IDS" ]]; then
        echo -e "${GREEN}\nNo remote scripts found.${RESET}"
        return
    fi

    for REPO_ID in $REPO_IDS; do
        NAME=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .name" "${INPUT_FILE}")
        ORIGIN=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .origin" "${INPUT_FILE}")
        TAG=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .tag" "${INPUT_FILE}")
        TARGET=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .target" "${INPUT_FILE}")
        ARGS=$(yq e ".hooks.remote.repos[] | select(.id == \"${REPO_ID}\") | .args[]" "${INPUT_FILE}" | tr '\n' ' ')
        FILE_URL=""

        if [[ $NAME != *.sh ]]; then
            exit_error "Only Bash scripts are supported so far."
        fi

        if [[ "$ORIGIN" == https://github.com* ]]; then
            PROJECT="${ORIGIN#https://github.com/}"
            FILE_URL="https://raw.githubusercontent.com/${PROJECT}/refs/tags/${TAG}/${TARGET}/${NAME}"
        else
            exit_error "Currently, only GitHub repositories are supported."
        fi

        fetch_write_remote_script "$FILE_URL" "$NAME"
        
        log_script_execution "${REMOTE_LOCATION}/${NAME}" "$ARGS"

        echo -e "${GREEN}Script loadded successfully.${RESET}"

        COUNT_REMOTE=$((COUNT_REMOTE + 1))
        if [ -n "$LIST_REMOTE" ]; then
            LIST_REMOTE+=", "
        fi
        LIST_REMOTE+="${GREEN}$NAME${RESET}"
    done
}

load_sources() {
    echo -e "${YELLOW}\nLoading sources...${RESET}"

    SOURCES=$(yq eval '.hooks.local.sources[].path' "${INPUT_FILE}")
    if [[ -z "$SOURCES" ]]; then
        echo -e "${GREEN}\nNo remote scripts found.${RESET}"
        return
    fi

    for SOURCE in $SOURCES; do
        {
            echo -e "\n# Import ${SOURCE}"
            echo "source ${SOURCE}"
        } >> "$OUTPUT_FILE"

        chmod +x "$SOURCE"

        COUNT_SOURCES=$((COUNT_SOURCES + 1))
        if [ -n "$LIST_SOURCES" ]; then
            LIST_SOURCES+=", "
        fi
        LIST_SOURCES+="${GREEN}$SOURCE${RESET}"
    done

    echo ""
}

load_local_scripts() {
    echo -e "${YELLOW}\nLoading local scipts...${RESET}"

    SCRIPT_IDS=$(yq eval '.hooks.local.scripts[].id' "${INPUT_FILE}")
    if [[ -z "$SCRIPT_IDS" ]]; then
        echo -e "${GREEN}\nNo local scripts found.${RESET}"
        return
    fi

    for SCRIPT_ID in $SCRIPT_IDS; do
        SCRIPT=$(yq e ".hooks.local.scripts[] | select(.id == \"${SCRIPT_ID}\") | .path" "${INPUT_FILE}")
        ARGS=$(yq e ".hooks.local.scripts[] | select(.id == \"${SCRIPT_ID}\") | .args[]" "${INPUT_FILE}" | tr '\n' ' ')

        echo -e "\nReading ${BOLD}'${SCRIPT}' script${RESET}..."

        LOCATION="${WORKSPACE}/${SCRIPT}"

        file_must_exists "$LOCATION"

        log_script_execution "$SCRIPT" "$ARGS"

        chmod +x "$LOCATION"

        echo -e "${GREEN}Script loadded successfully.${RESET}"

        COUNT_LOCAL=$((COUNT_LOCAL + 1))
        if [ -n "$LIST_LOCAL" ]; then
            LIST_LOCAL+=", "
        fi
        LIST_LOCAL+="${GREEN}$SCRIPT_ID${RESET}"
    done

}

file_must_exists() {
    local FILE=$1
    if [[ ! -f "$FILE" ]]; then
        exit_error "File does not exist."
    fi
}

block_separator() {
    echo -e "\n------------------------------------------------------------------------------------------------"
}

# ----------------- #
# BUILDING PROCCESS #
# ----------------- #

file_must_exists "$INPUT_FILE"

if ! YAML_EVAL=$(yq eval '.' "$INPUT_FILE" 2>&1); then
    exit_error "Invalid YAML format: $YAML_EVAL"
fi

clean_output "$OUTPUT_FILE"

if [ "$IS_TEST" = true ]; then
    echo -e "\n${YELLOW}${BOLD}Executing in test mode, script will be mounted in '${RESET}${GREEN}${BOLD}${OUTPUT_FILE}${RESET}${YELLOW}${BOLD}'.${RESET}"
fi

{
    echo "#!/bin/sh"
    echo -e "\n# Color codes"
    echo -e "BOLD=\"\\\033[1m\""
    echo -e "RESET=\"\\\033[0m\""
} >> "$OUTPUT_FILE"

echo -e "\n${BOLD}Building pre-commit hook...${RESET}"

block_separator


# ------------ #
# LOAD SOURCES #
# ------------ #

echo -e "\n# <-- SOURCES -->" >> "$OUTPUT_FILE"

load_sources

block_separator


# --------------------#
# LOAD REMOTE SCRIPTS #
# ------------------- #

echo -e "\n# <-- REPOSITORY SCRIPTS -->" >> "$OUTPUT_FILE"
echo -e "\nprintf \"\${BOLD}\\\\nRepository scripts: \\\\n\${RESET}\"" >> "$OUTPUT_FILE"

load_remote_scripts

block_separator


# ------------------ #
# LOAD LOCAL SCRIPTS #
# ------------------ #

echo -e "\n# <-- LOCAL SCRIPTS -->" >> "$OUTPUT_FILE"
echo -e "\nprintf \"\${BOLD}\\\\nLocal scripts: \\\\n\${RESET}\"" >> "$OUTPUT_FILE"

load_local_scripts

block_separator


# ---------------- #
# EXECUTION RESUME #
# ---------------- #

END_TIME=$(date +%s%3N)
TIME=$((END_TIME - START_TIME))

echo -e "\n${BOLD}Hook has been building successfully.${RESET}\n"

echo -e "[${BOLD}$COUNT_REMOTE${RESET}] Remote scripts: $LIST_REMOTE"
echo -e "[${BOLD}$COUNT_SOURCES${RESET}] Sources: $LIST_SOURCES"
echo -e "[${BOLD}$COUNT_LOCAL${RESET}] Local scripts: $LIST_LOCAL"

echo -e "\n${YELLOW}Execution time: ${TIME} ms${RESET}"

echo ""
